package server.parts;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
class BotTest {


    Bot bot = new Bot();
    private final int BOT = 0;
    private final int PLAYER  = 1;




    @Test
    void getEmptyCells() {

        int [][] desk = {
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,0,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},};

        int freeCells = bot.getEmptyCells(desk).size();
        assertEquals(99, freeCells);

    }

    @Test
    void getEmptyCells1() {
        int [][] desktest = {
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,0,-1,-1,-1,-1},
                {-1,-1,-1,-1,1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},};

        int freeCells = bot.getEmptyCells(desktest, 55).size();
        assertEquals(97, freeCells);
    }

    @Test
    void minimax() {
        int [][] desktest = {{1,0,1,0,1,0,1,0,1,0}, {1,0,1,0,1,0,1,0,1,0}, {1,0,1,0,1,0,1,0,1,0}, {1,0,1,0,1,0,1,0,1,0},
                {-1,1,0,-1,0,1,0,1,0,1}, {0,1,0,1,0,1,0,1,0,1}, {0,1,0,1,0,1,0,1,0,1}, {0,1,0,1,0,1,0,1,0,1}, {1,0,1,0,1,0,1,0,1,0}, {1,0,1,0,1,0,1,0,1,0},};
        int index = bot.minimax(desktest, BOT,33, 0).getIndex();
        assertEquals(43, index);
        index = bot.minimax(desktest, BOT,33, 0).getIndex();
        assertNotEquals(40, index);
    }





    @Test
    void winning() {
        int [][] desk = {
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,0,-1,-1,-1,-1}, {-1,-1,-1,-1,1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}, {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},};

        boolean win = bot.winning(desk, BOT);
        assertFalse(win);
        desk = new int[][]{
                {1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {1, 1, -1, -1, -1, -1, -1, -1, -1, -1},
                {1, -1, 1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, 1, 1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, 1, 0, -1, -1, -1, -1},
                {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1},};
        win = bot.winning(desk, PLAYER);
        assertTrue(win);
    }
}